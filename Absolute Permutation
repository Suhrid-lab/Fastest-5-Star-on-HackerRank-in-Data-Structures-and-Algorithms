import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class Result {

    /*
     * Complete the 'absolutePermutation' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts following parameters:
     * 1. INTEGER n
     * 2. INTEGER k
     */

    public static List<Integer> absolutePermutation(int n, int k) {
        List<Integer> result = new ArrayList<>();
        
        // Case 1: If k is 0, the permutation is 1, 2, 3, ... n
        if (k == 0) {
            for (int i = 1; i <= n; i++) {
                result.add(i);
            }
            return result;
        }

        // Case 2: If n is not divisible by 2k, a solution is not possible.
        // We return an empty list or a list with -1 as per problem requirements.
        if (n % (2 * k) != 0) {
            result.add(-1);
            return result;
        }

        // Case 3: Construct the permutation.
        // The pattern of shifting by +k and -k repeats every 2k elements.
        for (int i = 1; i <= n; i++) {
            // Determine if the current number is in a +k or -k block.
            // (i - 1) / k gives us the block number (0-indexed).
            // (i - 1) / k % 2 determines if it's an even (0) or odd (1) block.
            // Even blocks (0, 2, 4...) get +k. Odd blocks (1, 3, 5...) get -k.
            if (((i - 1) / k) % 2 == 0) {
                // Shift by +k
                result.add(i + k);
            } else {
                // Shift by -k
                result.add(i - k);
            }
        }
        
        return result;
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, t).forEach(tItr -> {
            try {
                String[] firstMultipleInput = bufferedReader.readLine().replaceAll("\\s+$", "").split(" ");

                int n = Integer.parseInt(firstMultipleInput[0]);

                int k = Integer.parseInt(firstMultipleInput[1]);

                List<Integer> result = Result.absolutePermutation(n, k);

                bufferedWriter.write(
                    result.stream()
                        .map(Object::toString)
                        .collect(joining(" "))
                    + "\n"
                );
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
